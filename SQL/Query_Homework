/* 1a. You need a list of all the actors who have Display the first and last names of all actors from the table actor. */

        select first_name,last_name from actor

/* 1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name */

        ALTER TABLE actor
        ADD column ACTORNAME varchar(40);

        select * from actor

        update actor
        set ACTORNAME=CONCAT(first_name," ", last_name)

        UPDATE actor
        SET first_name = CONCAT(UCASE(LEFT(first_name, 1)), LCASE(SUBSTRING(first_name, 2))) 

/* 2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe." What is one query would you use to obtain this information? */

        select actor_id,first_name,last_name 
        from actor
        where first_name='Joe'

/* 2b. Find all actors whose last name contain the letters GEN */

        select first_name,last_name 
        from actor
        where last_name like '%gen%'

/* 2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order */

        select last_name,first_name
        from actor
        where last_name like '%li%'

/*2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China */

        select * from country

        select country_id,country 
        from country
        where country in ("Afghanistan", "Bangladesh", "China")

/* 3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type. */

        ALTER TABLE actor
        ADD COLUMN  middle_name varchar(30)
        AFTER first_name

/* 3b. You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs */

        ALTER TABLE actor MODIFY COLUMN middle_name blob;

/* 3c. Now delete the middle_name column. */

        ALTER TABLE actor DROP middle_name;


/*4a.  List the last names of actors, as well as how many actors have that last name */

        SELECT last_name,count(last_name)as Count
        FROM actor
        GROUP BY last_name
        order by last_name


/*4b.  List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors */

        SELECT last_name,count(last_name)as Count FROM actor
        GROUP BY last_name
        having count(last_name) > 1
        order by last_name

/* 4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record. */

        select * from actor
        where actor_id=172

        update actor 
        set first_name='Harpo',ACTORNAME=CONCAT(first_name," ", last_name)
        where actor_id=172

/* 4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.) */
        Select * from actor
        where first_nam='Harpo'

        update actor 
        set first_name='Groucho',ACTORNAME=CONCAT(upper(first_name)," ", upper(last_name))
        where actor_id=172

        Select * from actor
        where actor_id=172


/* 5a. You cannot locate the schema of the address table. Which query would you use to re-create it? */

        SELECT TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES
        where TABLE_NAME = "address"


/* 6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address: */

        select a.first_name, a.last_name,b.address from staff a

        inner join address b
        on
        a.address_id=b.address_id

/* 6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment. */

        select staff.username as Staff,sum(payment.amount) as Amount_2015 from staff 
        inner join 
        (select* from payment where payment_date like "2005%" ) payment
        on staff.staff_id=payment.staff_id
        group by staff.username

/* 6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join. */

        select film_actor.film_id,film.title,count(film_actor.actor_id) as Actor_No from film_actor
        inner join film
        on film_actor.film_id=film.film_id
        group by film_actor.film_id
        order by Actor_No

/* 6d. How many copies of the film Hunchback Impossible exist in the inventory system? */

        select film.title,count(inventory.inventory_id)from inventory 
        inner join  film 
        on inventory.film_id=film.film_id
        where film.title='Hunchback Impossible'

/* 6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer. List the customers alphabetically by last name */

        select customer.customer_id,customer.last_name,sum(payment.amount) as Total_Amount
        from payment
        inner join customer
        on payment.customer_id=customer.customer_id
        group by customer.customer_id
        order by customer.last_name

/* 7a. The music of Queen and Kris Krist offers on have seen an unlikely resurgence. As an unintended consequence, films starting with the letters K and Q have also soared in popularity. Use subqueries to display the titles of movies starting with the letters K and Q whose language is English. */

        select * from film where (lower(title) like 'k%' or lower(title) like 'q%') and language_id in
        (select language_id from language where name = 'English')

/* 7b. Use subqueries to display all actors who appear in the film Alone Trip */

        select ACTORNAME from actor where actor_id in (select actor_id from film_actor
        where film_id in (select film_id from film
        where title='Alone Trip'))

/* 7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. Use joins to retrieve this information. */

        select first_name,last_name,email 
        from customer cu join
        address a join 
        city ci join 
        country co 
        on 
        co.country_id=ci.country_id and
        cu.address_id=a.address_id and
        a.city_id=ci.city_id
        where co.country='Canada'

/* 7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as famiy films. */

        select f.title,c.name from film f join
        film_category fc join
        category c on
        c.category_id=fc.category_id and 
        f.film_id=fc.film_id
        where c.name='Family'

/* 7e. Display the most frequently rented movies in descending order. */

        select f.title,count(r.rental_date) as 'Rental Frequency'
        from film f
        join rental r
        join inventory i
        on r.inventory_id=i.inventory_id
        and f.film_id=i.film_id
        group by r.inventory_id
        order by count(r.rental_date) desc

/* 7f. Write a query to display how much business, in dollars, each store brought in. */

        select store.store_id,sum(payment.amount) as 'Total Business in Dollar'
        from payment
        join staff 
        join store
        on store.store_id=staff.store_id
        and payment.staff_id = staff.staff_id
        group by store.store_id

/* 7g. Write a query to display for each store its store ID, city, and country. */

        select s.store_id,c.city,k.country from store s
        join address a 
        join city c
        join country k
        on s.address_id=a.address_id
        and a.city_id=c.city_id
        and c.country_id=k.country_id

/* 7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.) */

        select category.name,sum(payment.amount) as "Gross Revenue"
        from category
        join film_category
        join inventory
        join rental
        join payment
        on category.category_id=film_category.category_id
        and film_category.film_id=inventory.film_id
        and inventory.inventory_id=rental.inventory_id
        and rental.rental_id=payment.rental_id
        group by category.name
        order by sum(payment.amount) desc
        limit 5

/* 8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view. */


        CREATE VIEW Grosser as 
        select category.name , sum(payment.amount) as Revenue from category
        join film_category
        join inventory
        join rental
        join payment
        on category.category_id=film_category.category_id
        and film_category.film_id=inventory.film_id
        and inventory.inventory_id=rental.inventory_id
        and rental.rental_id=payment.rental_id
        group by category.name
        order by sum(payment.amount) desc

/* 8b. How would you display the view that you created in 8a? */  

        select name as Genre, Revenue from Grosser
        limit 5
        
/* 8c. You find that you no longer need the view top_five_genres. Write a query to delete it. */

        drop view Grosser

